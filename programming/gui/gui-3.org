#+TITLE: clojure GUI编程-3
#+DESCRIPTION: clojurescript写一个web UI。
#+KEYWORDS: clojurescript, re-frame, web ui
#+CATEGORIES: 编程, GUI
#+LANGUAGE: zh-CN


* 简介
  这部分主要是使用re-frame构建一个SPA程序，完成okex行情信息的显示。

  关于re-frame的设计理念和使用方法，参考[[https://github.com/Day8/re-frame/blob/master/docs/README.md][官方文档]]。

* 实现过程
  
** 创建项目
  使用[[https://github.com/Day8/re-frame-template][re-frame-template]]创建项目:
  lein new re-frame okex-web +10x +re-com +cider

  +cider配合emacs使用， +re-com使用现成的web gui组件, +10x 用于re-frame的调试。

  在emacs下使用cider-jack-in-cljs后，执行下面的代码转到cljs repl:
#+begin_src clojure

(use 'figwheel-sidecar.repl-api)
(start-figwheel!)
(cljs-repl)

#+end_src

  发现cljs不能正确输入，会出现一个stdin的minibuffer,解决方法参考
  https://clojureverse.org/t/emacs-figwheel-main-why-stdin-in-the-minibuffer/3955/8，
  修改figwheel-sidecar的版本号为"0.5.18"，cider/piggieback的版本号为"0.4.1"，为了兼容nrepl 0.6

  由于要使用ajax请求API，需要添加http-fx依赖，最后的project.clj如下:
#+INCLUDE "./okex-web/project.clj" src clojure -n

** 绕过CORS
   因为要跨域使用API,需要绕过浏览器的跨域限制,具体方法参考[[https://www.thepolyglotdeveloper.com/2014/08/bypass-cors-errors-testing-apis-locally/][Bypass CORS Errors When Testing APIs Locally]]。
   
   对于chrome,使用下面的命令行启动:
   chromium --disable-web-security --user-data-dir ./chromeuser

** re-frame的核心思想
   re-frame内部使用一个ratom作为db层进行数据存储[fn:1],
   修改db的事件使用reg-event-db注册，然后其它地方(其它事件中，或者view中)就可以通过dispatch这个事件发布消息(相当于发布者)。
   通过reg-sub注册对db的访问，在view中通过subscribe订阅注册的sub(订阅者),当sub指向的数据更改，view就会自动刷新。

   
   
** 发布
   使用以下命令编译生成js文件到resources/public文件夹：
#+begin_src sh
   lein do clean, cljsbuild once min
#+end_src

   可以看到release发布只有一个app.js，文件大小不到900K。
   在浏览打开index.html就可以使用了。注意必须关掉浏览器的CORS限制。

* 总结

* Footnotes

[fn:1]关于ApplicationState的[[https://github.com/Day8/re-frame/blob/master/docs/ApplicationState.md][官方文档]]
