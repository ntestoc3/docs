

好的编程： 依赖于从最开始就要系统化的思考、计划和理解，并在每一个阶段和每一步都要如此。
为了强调这点，我们就说系统化的程序设计和通过系统化设计的程序。

*everyone can design programs*

*everyone can experience the satisfaction that comes with creative design.*

程序设计--而不是编程--

学会通用的问题解决技能,体验深度创造性活动，学习一种新的审美形式。

* 系统化的设计
  关键是发现需要什么函数，如何连接它们，如何从基本成分构造它们。

  系统化的程序设计由两部分组成：设计配方和迭代优化。
  
** 函数设计指南
  - 从问题分析到数据定义
  - 签名，意图语句，头 
    说明函数消费和产生的数据类型
    意图语句(文档)
  - 函数示例 
    通过示例展示函数的目的(测试用例)
    通过具体的例子来发现需要什么样的函数。
  - 函数模板
  - 函数定义
    使用意图语句和示例(文档和测试用例)实现函数模板。
  - 测试
    转换函数示例到测试用例。
    测试可以发现函数定义的错误。
    测试还可以作为别人阅读和理解函数时的补充示例。
    通过测试确保函数对某些情况可以正常工作，
    通过在真实数据上运行函数可能会发现期望和实际的不同。
    
  每一个设计过程都针对一个问题。相应的答案自动地创建了一个中间产品。
  
  如果初学者碰到困难，专家或者辅导员可以通过设计指南查看现在的中间产品。
  自主控制过程就是编程和程序设计的关键不同之处。
  

  迭代优化：一次性做对所有事情基本是不可能的。
  事实上，迭代细化推荐首先去掉所有无关的细节，然后找到核心问题的解决方案。
  细化步骤添加一个去掉的细节，重新解决扩展出来的问题,并尽可能的利用现有的解决方案。
  重复(迭代)这些细化步骤，直到一个完整的解决方案。

  通过细化进行设计,先解决核心问题，再一步步丰富细节。

  学习程序设计需要不断动手实践。

  学习程序设计主要是学习原理和获得可转移的技能。
  
  程序设计增强分析能力和表达能力。

  基本的设计配方就是解决问题的方法指南。

  
  

    
    
